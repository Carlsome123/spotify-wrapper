"""
Views for managing Spotify user data, including updating user profiles,
fetching favorite tracks and artists, and generating dynamic descriptions using Groq API.
"""

import os  # Standard library import

from dotenv import load_dotenv  # Third-party imports
from rest_framework import viewsets
from django.core.exceptions import ObjectDoesNotExist
from django.http import JsonResponse
from django.shortcuts import HttpResponse
from groq import Groq,  GroqError

from accounts.models import SpotifyToken  # Local imports
from accounts.utils import is_spotify_authenticated
from .utils import (get_spotify_user_data, get_user_favorite_artists, get_user_favorite_tracks,
                    get_top_genres, get_quirkiest_artists)
from .models import Song, SpotifyUser
from .serializers import SongSerializer





# pylint: disable=too-many-ancestors
class SongViewSet(viewsets.ModelViewSet):
    """
    For testing, API endpoint that allows songs to be viewed or edited.
    """
    queryset = Song.objects.all()  # pylint: disable=no-member
    serializer_class = SongSerializer

def update_or_add_spotify_user(request):
    """
    Adds or updates the user's profile, favorite tracks, and dynamic description
    generated by the Llama3 API based on their music preferences.
    """

    # Load environment variables

    load_dotenv()
    session_id = request.session.session_key

    groq_api_key = os.getenv('GROQ_API_KEY')
    print(groq_api_key)

    if not groq_api_key:
        raise GroqError("GROQ_API_KEY environment variable is not set.")

    client = Groq(api_key=groq_api_key)


    if not is_spotify_authenticated(session_id):
        return JsonResponse({'error': 'User not authenticated'}, status=403)

    user = request.user

    # Check for existing SpotifyToken
    try:
        token_entry = SpotifyToken.objects.get(user=session_id)
    except ObjectDoesNotExist:
        return HttpResponse("User add/update failed: missing access token", status=500)

    access_token = token_entry.access_token

    # Fetch user data from Spotify API
    user_data = get_spotify_user_data(access_token)

    if user_data:
        # Get user's favorite artists and tracks
        favorite_artists_long = get_user_favorite_artists(access_token, 'long_term')

        # Create a dynamic description using Groq Llama3 API
        description_prompt = (
            f"Describe how someone who listens to artists like {', '.join(favorite_artists_long)} "
            "tends to act, think, and dress."
        )

        try:
            response = client.chat.completions.create(
                messages=[
                    {
                        "role": "system",
                        "content": "You are a music analyst who"
                                   " describes user"
                                   " behavior based on their music tastes.",
                    },
                    {
                        "role": "user",
                        "content": description_prompt
                    }
                ],
                model="llama3-8b-8192",
            )

            llama_description = response.choices[0].message.content
        except KeyError as e:
            llama_description = f"Key error: {str(e)}"
        except Exception as e:
            llama_description = f"Description unavailable due to API error: {str(e)}"  # pylint: disable=broad-exception-caught

        # Update or create the SpotifyUser
        tracks_short = get_user_favorite_tracks(access_token, 'short_term')
        tracks_medium = get_user_favorite_tracks(access_token, 'medium_term')
        tracks_long = get_user_favorite_tracks(access_token, 'long_term')
        artists_short = get_user_favorite_artists(access_token, 'short_term')
        artists_medium = get_user_favorite_artists(access_token, 'medium_term')
        artists_long = get_user_favorite_artists(access_token, 'long_term')
        genres_short = get_top_genres(artists_short)
        genres_medium = get_top_genres(artists_medium)
        genres_long = get_top_genres(artists_long)
        quirky_short = get_quirkiest_artists(artists_short)
        quirky_medium = get_quirkiest_artists(artists_medium)
        quirky_long = get_quirkiest_artists(artists_long)
        spotify_user, created = SpotifyUser.objects.update_or_create(  # pylint: disable=no-member
            spotify_id=user_data['id'],
            defaults={
                'user': user,
                'spotify_id': user_data.get('id'),
                'display_name': user_data.get('display_name'),
                'email': user_data.get('email'),
                'profile_image_url': user_data.get('images')[0]['url']
                if user_data.get('images') else None,
                'favorite_tracks_short': tracks_short,
                'favorite_tracks_medium': tracks_medium,
                'favorite_tracks_long': tracks_long,
                'favorite_artists_short': artists_short,
                'favorite_artists_medium': artists_medium,
                'favorite_artists_long': artists_long,
                'favorite_genres_short': genres_short,
                'favorite_genres_medium': genres_medium,
                'favorite_genres_long': genres_long,
                'quirkiest_artists_short': quirky_short,
                'quirkiest_artists_medium': quirky_medium,
                'quirkiest_artists_long': quirky_long,
                'llama_description': llama_description,  # Save the generated description
                'llama_songrecs': "placeholder"
            }
        )

        return JsonResponse({'spotify_user': {'id': spotify_user.spotify_id,
                                              'created': created,
                                              'description': llama_description}})

    return JsonResponse({'error': 'Could not fetch user data from Spotify'}, status=500)
